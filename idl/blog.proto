syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package blog;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Blog Api";
		version: "1.0";
		contact: {
			name: "go-grpc-http-rest-microservice-tutorial project";
			url: "https://github.com/amsokol/go-grpc-http-rest-microservice-tutorial";
			email: "medium@amsokol.com";
		};
	};
	schemes: HTTP;
	host: "localhost";
	consumes: "application/json"
	produces: "application/json";
	security_definitions: {
		security: {
		key: "bearerAuth";
		value: {
			type: TYPE_API_KEY; // = apiKey
			name: "Authorization";
			in: IN_HEADER; // = header
		}
		}
	};
	security: [
		{
			security_requirement: {
				key: "bearerAuth";
				value: {}
			}
		}
	];
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

service BlogService {
    rpc List (ListRequest) returns (ListResponse) {
        option (google.api.http) = {
            get: "/v1/blogs"
        };
    }
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/create"
            body: "*"
        };
    }

    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/blog/{blogID}"
        };
    }

    rpc Update (UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/blog/{blogID}"
        };
    }

    rpc Remove (RemoveRequest) returns (RemoveResponse) {
        option (google.api.http) = {
            put: "/v1/blog/{blogID}"
        };
    }

    rpc Publish (PublishRequest) returns (PublishResponse) {
        option (google.api.http) = {
            put: "/v1/blog/{blogID}"
        };
    }
}

enum Status {
    INVALID = 0;
    DRAFT = 1;
    PENDING = 2;
    PUBLISHED = 3;
    REMOVE = 4;
}

enum Type {
    PUBLIC = 0;
    PRIVATE = 1;
}

message ListRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListResponse {
    message Data {
        repeated BlogData blog = 1;
    }
    Data data = 1;
    Error error = 2;
}

message CreateRequest {
    string userID = 1;
    string header = 2;
    string subtitle = 3;
    string background = 4;
    string content = 5;
    int32 readTime = 6;
}

message CreateResponse {
    message Data {
        string blogID = 1;
    }
    Data data = 1;
    Error error = 2;
}

message GetRequest {
    string blogID = 1;
}

message GetResponse {
    message Data {
        BlogData blog = 1;
    }
    Data data = 1;
    Error error = 2;
}

message UpdateRequest {
    string blogID = 1;
    string header = 2;
    string subtitle = 3;
    string background = 4;
    string content = 5;
}

message UpdateResponse {
    message Data {

    }
    Data data = 1;
    Error error = 2;
}

message RemoveRequest {
    string blogID = 1;
}

message RemoveResponse {
    message Data {

    }
    Data data = 1;
    Error error = 2;
}

message PublishRequest {
    string blogID = 1;
}

message PublishResponse {
    message Data {
        bool status = 1;
    }
    Data data = 1;
    Error error = 2;
}

message Comment {
    string author = 1;
    int64 createTime = 2;
    string content = 3;
}

message BlogData {
    string blogID = 1 [(gogoproto.moretags) = "gorm:\"primary_key\""];
    string header = 2;
    string subtitle = 3;
    string background = 4;
    string content = 5;
    int64 createTime = 6;
    Status status = 7;
    Type type = 8;
    int64 likes = 9;
    int64 views = 10;
    repeated Comment comments = 11 [(gogoproto.moretags) = "gorm:\"-\""];
    string commentStr = 12 [(gogoproto.moretags) = "json:\"-\""];
    repeated string tags = 13 [(gogoproto.moretags) = "gorm:\"-\""];
    string tagStr = 14 [(gogoproto.moretags) = "json:\"-\""];
    repeated string images = 15 [(gogoproto.moretags) = "gorm:\"-\""];
    string imagesStr = 16 [(gogoproto.moretags) = "json:\"-\""];
    string userID = 17;
    int32 readTime = 18;
}

message Error {
    int32 code = 1;
    string message = 2;
}